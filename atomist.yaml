
skill:
  name: 'atomist/github-lifecycle-skill'
  title: GitHub Notifications
  version: 0.5.0
  author: Atomist
  description: Get smart, actionable notifications for GitHub
  documentation: |
    Sends notifications for GitHub activity to Slack channels that you configure in the Slack
    integration for Atomist.  See all commit/push, issue, pull request and other activity in
    neatly presented in Slack or Microsoft Teams messages. Configure the amount of information
    you get in the notifications messages.  Notifications that are actionable, like reacting to,
    commenting on or closing a GitHub issue, with buttons right in the notification. Welcome to
    2020 (we've been doing this since 2016).  You're welcome.

    Depends on the Slack or Microsoft Teams integration for Atomist.
  category:
    - productivity
    - chat
  license: Apache-2.0
  homepage: https://github.com/atomist/lifecycle-github-skill
  repository: https://github.com/atomist/lifecycle-github-skill.git
  icon: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png

  package:
    - use: 'atomist/package-sdm-skill/package'

  runtime:
    memory: 1024
    timeout: 60
           
commands:
  - name: ConfigureDirectMessageUserPreferences
    description: Configure DM preferences for the invoking user
    pattern: "^(?:configure\\s+direct\\s+messages|configure\\s+dms|configure\\s+dm\\s+preferences)$"
  - name: ConfigureLifecyclePreferences
    description: Configure lifecycle actions for the current channel
    pattern: "^(?:configure\\s+lifecycle)$"
  - name: SubscribeToGoalSets
    description: Subscribe to goal sets
    pattern: ^(?:subscribe\s+to\s+goal\s+sets)(?:\s+--(?:login)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: UnscribeFromGoalSets
    description: Unsubscribe from goal sets
    pattern: ^(?:unsubscribe\s+from\s+goal\s+sets)(?:\s+--(?:login)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: CreateChannel
    description: Create channel and link it to a repository
    pattern: ^(?:link\s+channel)(?:\s+--(?:channel|repo)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: LinkRepo
    description: Link a repository and channel
    pattern: "^(?:repo|link\\s+repo|link\\s+repository)$"
  - name: ListRepoLinks
    description: View repos linked to this channel and optionally unlink them
    pattern: "^(?:repos|repositories)$"
  - name: UnlinkRepo
    description: Unlink a repository and channel
    pattern: "^(?:unlink\\s+repo|unlink\\s+repository)$"
  - name: AddGitHubPullRequestAutoLabels
    description: Add Pull Request auto merge and rebase labels
    pattern: "^(?:add\\s+pr\\s+labels|add\\s+auto\\s+merge\\s+labels)$"
  - name: AssignGitHubPullRequestReviewer
    description: Assign GitHub pull request reviewer
    pattern: ^(?:assign\s+reviewer|assign\s+github\s+reviewer)(?:\s+--(?:issue|reviewer)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: AssignToMeGitHubIssue
    description: Assign a GitHub issue to the invoking user or provided assingee
    pattern: ^(?:assign\s+issue\s+to\s+me|assign\s+github\s+issue\s+to\s+me)(?:\s+--(?:issue|assignee)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: CloseGitHubIssue
    description: Close a GitHub issue
    pattern: ^(?:close\s+issue|close\s+github\s+issue)(?:\s+--(?:issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: CommentGitHubIssue
    description: Comment on a GitHub issue
    pattern: ^(?:comment\s+issue|comment\s+github\s+issue)(?:\s+--(?:issue|comment)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: CreateGitHubIssue
    description: Create an issue on GitHub
    pattern: ^(?:create\s+issue|create\s+github\s+issue)(?:\s+--(?:title|body)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: CreateGitHubRelease
    description: Create a release of a repo on GitHub
    pattern: ^(?:create\s+release|create\s+github\s+release)(?:\s+--(?:tag|message)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: CreateGitHubTag
    description: Create a tag on GitHub
    pattern: ^(?:create\s+tag|create\s+github\s+tag)(?:\s+--(?:tag|sha|message)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: CreateRelatedGitHubIssue
    description: Create a related GitHub issue in a different org and/or repo
    pattern: ^(?:related\s+issue|related\s+github\s+issue)(?:\s+--(?:targetOwner|targetRepo|issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: DeleteGitHubBranch
    description: Deletes a GitHub branch
    pattern: ^(?:delete\s+branch|delete\s+github\s+branch)(?:\s+--(?:branch)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: DisplayGitHubIssue
    description: Display an issue on GitHub
    pattern: ^(?:show\s+issue|show\s+github\s+issue)(?:\s+--(?:issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: DisplayGitHubPullRequest
    description: Display a pull request on GitHub
    pattern: ^(?:show\s+pull\s+request|show\s+pr|show\s+github\s+pr|show\s+github\s+pull\s+request)(?:\s+--(?:issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: EnableGitHubPullRequestAutoMerge
    description: Enable Pull Request auto merge
    pattern: ^(?:auto\s+merge\s+pr|auto\s+merge\s+github\s+pr)(?:\s+--(?:issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: EnableGitHubPullRequestAutoRebase
    description: Enable Pull Request auto rebase
    pattern: ^(?:auto\s+rebase\s+pr|auto\s+rebase\s+github\s+pr)(?:\s+--(?:issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: LinkRelatedGitHubIssue
    description: Link a related GitHub issue in a different org and/or repo
    pattern: ^(?:link\s+issue|link\s+github\s+issue)(?:\s+--(?:targetOwner|targetRepo|targetIssue|issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: ListMyGitHubIssues
    description: List user's GitHub issues from mapped repositories
    pattern: ^(?:my\s+issues|my\s+github\s+issues)(?:\s+--(?:days)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: MergeGitHubPullRequest
    description: Merge a GitHub Pull Request
    pattern: ^(?:merge\s+pr|merge\s+pullrequest|merge\s+github\s+pr|merge\s+gihub\s+pullrequest)(?:\s+--(?:issue|mergeMethod|title|message|sha)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: MoveGitHubIssue
    description: Moves a GitHub issue to a different org and/or repo
    pattern: ^(?:move\s+issue|move\s+github\s+issue)(?:\s+--(?:targetOwner|targetRepo|issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: RaiseGitHubPullRequest
    description: Raise a GitHub pull request
    pattern: ^(?:raise\s+pr|raise\s+pullrequest|raise\s+github\s+pr|raise\s+github\s+pullrequest)(?:\s+--(?:title|body|base|head)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: ReactGitHubIssue
    description: React to a GitHub issue
    pattern: ^(?:react\s+issue|react\s+github\s+issue)(?:\s+--(?:reaction|issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: ReactGitHubIssueComment
    description: React to a GitHub comment
    pattern: ^(?:react\s+issue\s+comment|react\s+github\s+issue\s+comment)(?:\s+--(?:reaction|comment)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: ReopenGitHubIssue
    description: Reopen a GitHub issue
    pattern: ^(?:reopen\s+issue|reopen\s+github\s+issue)(?:\s+--(?:issue)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: SearchGitHubRepositoryIssues
    description: Search issues and pull requests in GitHub repositories
    pattern: ^(?:search\s+issues|search\s+github\s+issues)(?:\s+--(?:q|days|perPage|page|id)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$
  - name: ToggleLabelGitHubIssue
    description: Add label to or remove a label from a GitHub issue
    pattern: ^(?:toggle\s+issue\s+label|toggle\s+github\s+issue\s+label)(?:\s+--(?:issue|label)=(?:'[^']*?'|"[^"]*?"|[\w]*?))*$

subscriptions:
  - subscription NotifyPusherOnBuild { Build { _id status buildUrl name number provider
    buildId commit { sha message committer { login person { chatId { screenName preferences
    { name value } chatTeam { id preferences { name value } } } } } } repo { name owner
    org { provider { url apiUrl providerId providerType private } } channels { name
    channelId } } }}
  - 'subscription BranchToBranchLifecycle { Branch { _id pullRequests(first: 1, orderBy:
  [timestamp_desc]) { merged } commit { sha message } name repo { name owner defaultBranch
  channels { name team { id name } } org { team { id chatTeams { id preferences {
  name value } } } provider { id apiUrl url providerId providerType private } } }
  timestamp }}'
  - 'subscription DeletedBranchToBranchLifecycle { DeletedBranch { _id pullRequests(first:
  1, orderBy: [timestamp_desc]) { merged } commit { sha message } name repo { name
  owner defaultBranch channels { name team { id name } } org { team { id chatTeams
  { id preferences { name value } } } provider { id apiUrl url providerId providerType
  private } } } timestamp }}'
  - subscription PullRequestToBranchLifecycle { PullRequest { branch @required { id
    } }}
  - 'subscription BotJoinedChannel { UserJoinedChannel { user(isAtomistBot: "true")
  @required { isAtomistBot screenName userId } channel { botInvitedSelf channelId
  name repos { name owner org { provider { url } } } team { id orgs { owner ownerType
  provider { apiUrl providerId } repo { name owner } } } } }}'
  - subscription ChannelLinkCreated { ChannelLink { channel { name normalizedName team
    { id } } repo { name owner defaultBranch org { ownerType provider { apiUrl url providerId
    providerType private } } } }}
  - subscription NotifyMentionedOnIssueComment { Comment { _id gitHubId body by { login
    person { chatId { screenName preferences { name value } chatTeam { id } } } } issue
    { title body state timestamp number lastAssignedBy { login } openedBy { login }
    repo { name owner org { provider { url providerId providerType private } } channels
    { name channelId } } } }}
  - subscription NotifyMentionedOnPullRequestComment { Comment { _id gitHubId body by
    { login person { chatId { screenName preferences { name value } chatTeam { id }
    } } } pullRequest { title body state merged timestamp number lastAssignedBy { login
    } author { login } repo { name owner org { provider { url providerId providerType
    private } } channels { name channelId } } } }}
  - subscription CommentToIssueCommentLifecycle { Comment { _id gitHubId timestamp body
    by { login name person { chatId { screenName } gitHubId { login } } } issue { title
    number state repo { name owner channels { name team { id } } org { provider { apiUrl
    url providerId providerType private } team { id chatTeams { id preferences { name
    value } } } } labels { name } } openedBy { login } closedBy { login } assignees
    { login } resolvingCommits { sha message author { person { chatId { screenName }
    } } } labels { name } } }}
  - subscription CommentToPullRequestCommentLifecycle { Comment { _id gitHubId timestamp
    body by { login name person { chatId { screenName } gitHubId { login } } } pullRequest
    { title number state merged repo { name owner channels { name team { id } } org
    { provider { apiUrl url providerId providerType private } team { id chatTeams {
    id preferences { name value } } } } labels { name } } author { login person { chatId
    { screenName } } } assignees { login person { chatId { screenName } } } labels {
    name } } }}
  - subscription IssueToIssueCommentLifecycle { Issue { _id title number state repo
    { name owner channels { name team { id } } org { provider { apiUrl url providerId
    providerType private } team { id chatTeams { id preferences { name value } } } }
    labels { name } } openedBy { login } closedBy { login } assignees { login } resolvingCommits
    { sha message author { person { chatId { screenName } } } } labels { name } comments
    { gitHubId timestamp body by { login name person { chatId { screenName } gitHubId
    { login } } } issue { number state title } } }}
  - subscription PullRequestToPullRequestCommentLifecycle { PullRequest { _id title
    number state merged repo { name owner channels { name team { id } } org { provider
    { apiUrl url providerId providerType private } team { id chatTeams { id preferences
    { name value } } } } labels { name } } assignees { login person { chatId { screenName
    } } } labels { name } comments { gitHubId timestamp body by { login name person
    { chatId { screenName } gitHubId { login } } } pullRequest { number state title
    } } }}
  - subscription IssueRelationshipOnCommit { Commit { repo { name owner org { provider
    { providerId providerType private } } } sha message }}
  - 'subscription CommentOnRelatedIssueClosed { Issue(state: closed) { number repo {
  owner name } closedBy { login } }}'
  - subscription NotifyMentionedOnIssue { Issue { _id name number title body state lastAssignedBy
    { login } openedBy { login person { chatId { screenName preferences { name value
    } chatTeam { id } } } } closedBy { login person { chatId { screenName preferences
    { name value } } } } assignees { login person { chatId { screenName preferences
    { name value } chatTeam { id } } } } repo { name owner labels { name } channels
    { name channelId } org { provider { apiUrl gitUrl url providerId providerType }
    } } }}
  - subscription IssueToIssueLifecycle { Issue { _id name title body state number createdAt
    updatedAt closedAt comments { by { login } body } resolvingCommits { sha message
    author { login person { chatId { screenName } } } } openedBy { login } closedBy
    { login } assignees { login } repo { name owner labels { name } channels { name
    team { id } } org { provider { apiUrl gitUrl url providerId providerType private
    } team { id chatTeams { id preferences { name value } } } } } labels { name } timestamp
    }}
  - subscription IssueToIssueCardLifecycle { Issue { _id name title body state number
    createdAt updatedAt closedAt comments { by { login } body } resolvingCommits { sha
    message author { login person { chatId { screenName } } } } openedBy { login } closedBy
    { login } assignees { login } repo { name owner labels { name } channels { name
    team { id } } org { provider { apiUrl gitUrl url providerId providerType private
    } team { id chatTeams { id preferences { name value } } } } } labels { name } timestamp
    }}
  - 'subscription CommentToIssueCardLifecycle { Comment(commentType: issue) { _id by
  { login } body issue { _id name title body state number createdAt updatedAt closedAt
  comments { by { login } body } resolvingCommits { sha message author { login person
  { chatId { screenName } } } } openedBy { login } closedBy { login } assignees {
  login } repo { name owner labels { name } channels { name team { id } } org { provider
  { apiUrl gitUrl url providerId providerType private } team { id chatTeams { id preferences
  { name value } } } } } labels { name } timestamp } timestamp }}'
  - 'subscription DeploymentOnK8Pod { K8Pod { namespace environment containers(state:
  "running") @required { name state ready timestamp image { commits @required { sha
  repo @required { name owner } } } } }}'
  - subscription RepositoryOnboarded { RepoOnboarded { repo { owner name org { provider
    { url apiUrl gitUrl providerId providerType private } team { id } } defaultBranch
    } }}
  - subscription NotifyMentionedOnPullRequest { PullRequest { _id name number title
    body state merged lastAssignedBy { login } author { login person { chatId { screenName
    preferences { name value } chatTeam { id } } } } merger { login person { chatId
    { screenName preferences { name value } } } } assignees { login person { chatId
    { screenName preferences { name value } chatTeam { id } } } } reviewers { login
    person { chatId { screenName preferences { name value } chatTeam { id } } } } repo
    { name owner labels { name } channels { name channelId } org { provider { apiUrl
    gitUrl url providerId providerType private } } } }}
  - 'subscription BranchToPullRequestLifecycle { Branch { _id pullRequests(first: 1)
  { _id number name body state merged timestamp title baseBranchName branchName createdAt
  mergedAt head { sha message } lastAssignedBy { login name person { gitHubId { login
  } chatId { screenName id } } } closedAt branch { name timestamp } author { login
  name person { gitHubId { login } chatId { screenName id } } } merger { login name
  person { gitHubId { login } chatId { screenName id } } } assignees { login name
  person { gitHubId { login } chatId { screenName id } } } reviewers { login name
  person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription CommentToPullRequestLifecycle { Comment { _id pullRequest { _id number
  name body state merged timestamp title baseBranchName branchName createdAt mergedAt
  head { sha message } lastAssignedBy { login name person { gitHubId { login } chatId
  { screenName id } } } closedAt branch { name timestamp } author { login name person
  { gitHubId { login } chatId { screenName id } } } merger { login name person { gitHubId
  { login } chatId { screenName id } } } assignees { login name person { gitHubId
  { login } chatId { screenName id } } } reviewers { login name person { gitHubId
  { login } chatId { screenName id } } } labels { name } comments { body } commits(first:
  10, orderBy: [timestamp_desc]) { sha timestamp message email { address } tags {
  name release { name timestamp } } statuses { state description context targetUrl
  timestamp } author { login name person { gitHubId { login } chatId { screenName
  id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl buildId
  status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc]) {
  name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription CommitToPullRequestLifecycle { Commit { _id pullRequests(first: 1)
  { _id number name body state merged timestamp title baseBranchName branchName createdAt
  mergedAt head { sha message } lastAssignedBy { login name person { gitHubId { login
  } chatId { screenName id } } } closedAt branch { name timestamp } author { login
  name person { gitHubId { login } chatId { screenName id } } } merger { login name
  person { gitHubId { login } chatId { screenName id } } } assignees { login name
  person { gitHubId { login } chatId { screenName id } } } reviewers { login name
  person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription DeletedBranchToPullRequestLifecycle { DeletedBranch { id pullRequests(first:
  1) { _id number name body state merged timestamp title baseBranchName branchName
  createdAt mergedAt head { sha message } lastAssignedBy { login name person { gitHubId
  { login } chatId { screenName id } } } closedAt branch { name timestamp } author
  { login name person { gitHubId { login } chatId { screenName id } } } merger { login
  name person { gitHubId { login } chatId { screenName id } } } assignees { login
  name person { gitHubId { login } chatId { screenName id } } } reviewers { login
  name person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription PullRequestToPullRequestLifecycle { PullRequest { _id number name
  body state merged timestamp title baseBranchName branchName createdAt mergedAt head
  { sha message } lastAssignedBy { login name person { gitHubId { login } chatId {
  screenName id } } } closedAt branch { name timestamp } author { login name person
  { gitHubId { login } chatId { screenName id } } } merger { login name person { gitHubId
  { login } chatId { screenName id } } } assignees { login name person { gitHubId
  { login } chatId { screenName id } } } reviewers { login name person { gitHubId
  { login } chatId { screenName id } } } labels { name } comments { body } commits(first:
  10, orderBy: [timestamp_desc]) { sha timestamp message email { address } tags {
  name release { name timestamp } } statuses { state description context targetUrl
  timestamp } author { login name person { gitHubId { login } chatId { screenName
  id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl buildId
  status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc]) {
  name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } }}'
  - 'subscription ReviewToPullRequestLifecycle { Review { _id pullRequest { _id number
  name body state merged timestamp title baseBranchName branchName createdAt mergedAt
  head { sha message } lastAssignedBy { login name person { gitHubId { login } chatId
  { screenName id } } } closedAt branch { name timestamp } author { login name person
  { gitHubId { login } chatId { screenName id } } } merger { login name person { gitHubId
  { login } chatId { screenName id } } } assignees { login name person { gitHubId
  { login } chatId { screenName id } } } reviewers { login name person { gitHubId
  { login } chatId { screenName id } } } labels { name } comments { body } commits(first:
  10, orderBy: [timestamp_desc]) { sha timestamp message email { address } tags {
  name release { name timestamp } } statuses { state description context targetUrl
  timestamp } author { login name person { gitHubId { login } chatId { screenName
  id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl buildId
  status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc]) {
  name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription StatusToPullRequestLifecycle { Status { _id commit { pullRequests(first:
  1) { _id number name body state merged timestamp title baseBranchName branchName
  createdAt mergedAt head { sha message } lastAssignedBy { login name person { gitHubId
  { login } chatId { screenName id } } } closedAt branch { name timestamp } author
  { login name person { gitHubId { login } chatId { screenName id } } } merger { login
  name person { gitHubId { login } chatId { screenName id } } } assignees { login
  name person { gitHubId { login } chatId { screenName id } } } reviewers { login
  name person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } } }}'
  - 'subscription BranchToPullRequestCardLifecycle { Branch { _id pullRequests(first:
  1) { _id number name body state merged timestamp title baseBranchName branchName
  createdAt mergedAt head { sha message } lastAssignedBy { login name person { gitHubId
  { login } chatId { screenName id } } } closedAt branch { name timestamp } author
  { login name person { gitHubId { login } chatId { screenName id } } } merger { login
  name person { gitHubId { login } chatId { screenName id } } } assignees { login
  name person { gitHubId { login } chatId { screenName id } } } reviewers { login
  name person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription CommentToPullRequestCardLifecycle { Branch { _id pullRequests(first:
  1) { _id number name body state merged timestamp title baseBranchName branchName
  createdAt mergedAt head { sha message } lastAssignedBy { login name person { gitHubId
  { login } chatId { screenName id } } } closedAt branch { name timestamp } author
  { login name person { gitHubId { login } chatId { screenName id } } } merger { login
  name person { gitHubId { login } chatId { screenName id } } } assignees { login
  name person { gitHubId { login } chatId { screenName id } } } reviewers { login
  name person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription CommitToPullRequestCardLifecycle { Commit { _id pullRequests(first:
  1) { _id number name body state merged timestamp title baseBranchName branchName
  createdAt mergedAt head { sha message } lastAssignedBy { login name person { gitHubId
  { login } chatId { screenName id } } } closedAt branch { name timestamp } author
  { login name person { gitHubId { login } chatId { screenName id } } } merger { login
  name person { gitHubId { login } chatId { screenName id } } } assignees { login
  name person { gitHubId { login } chatId { screenName id } } } reviewers { login
  name person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription DeletedBranchToPullRequestCardLifecycle { DeletedBranch { id pullRequests(first:
  1) { _id number name body state merged timestamp title baseBranchName branchName
  createdAt mergedAt head { sha message } lastAssignedBy { login name person { gitHubId
  { login } chatId { screenName id } } } closedAt branch { name timestamp } author
  { login name person { gitHubId { login } chatId { screenName id } } } merger { login
  name person { gitHubId { login } chatId { screenName id } } } assignees { login
  name person { gitHubId { login } chatId { screenName id } } } reviewers { login
  name person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription PullRequestToPullRequestCardLifecycle { PullRequest { _id number name
  body state merged timestamp title baseBranchName branchName createdAt mergedAt head
  { sha message } lastAssignedBy { login name person { gitHubId { login } chatId {
  screenName id } } } closedAt branch { name timestamp } author { login name person
  { gitHubId { login } chatId { screenName id } } } merger { login name person { gitHubId
  { login } chatId { screenName id } } } assignees { login name person { gitHubId
  { login } chatId { screenName id } } } reviewers { login name person { gitHubId
  { login } chatId { screenName id } } } labels { name } comments { body } commits(first:
  10, orderBy: [timestamp_desc]) { sha timestamp message email { address } tags {
  name release { name timestamp } } statuses { state description context targetUrl
  timestamp } author { login name person { gitHubId { login } chatId { screenName
  id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl buildId
  status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc]) {
  name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } }}'
  - 'subscription ReviewToPullRequestCardLifecycle { Review { _id pullRequest { _id
  number name body state merged timestamp title baseBranchName branchName createdAt
  mergedAt head { sha message } lastAssignedBy { login name person { gitHubId { login
  } chatId { screenName id } } } closedAt branch { name timestamp } author { login
  name person { gitHubId { login } chatId { screenName id } } } merger { login name
  person { gitHubId { login } chatId { screenName id } } } assignees { login name
  person { gitHubId { login } chatId { screenName id } } } reviewers { login name
  person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } }}'
  - 'subscription StatusToPullRequestCardLifecycle { Status { _id commit { pullRequests(first:
  1) { _id number name body state merged timestamp title baseBranchName branchName
  createdAt mergedAt head { sha message } lastAssignedBy { login name person { gitHubId
  { login } chatId { screenName id } } } closedAt branch { name timestamp } author
  { login name person { gitHubId { login } chatId { screenName id } } } merger { login
  name person { gitHubId { login } chatId { screenName id } } } assignees { login
  name person { gitHubId { login } chatId { screenName id } } } reviewers { login
  name person { gitHubId { login } chatId { screenName id } } } labels { name } comments
  { body } commits(first: 10, orderBy: [timestamp_desc]) { sha timestamp message email
  { address } tags { name release { name timestamp } } statuses { state description
  context targetUrl timestamp } author { login name person { gitHubId { login } chatId
  { screenName id } } } builds(trigger: push, orderBy: [timestamp_desc]) { name buildUrl
  buildId status timestamp } } builds(trigger: pull_request, orderBy: [timestamp_desc])
  { name buildUrl buildId status timestamp } reviews { state by { login } body } repo
  { name owner channels { name team { id } } allowRebaseMerge allowSquashMerge allowMergeCommit
  defaultBranch org { provider { url apiUrl gitUrl providerId providerType private
  } team { id chatTeams { id preferences { name value } } } } } } } }}'
  - subscription NotifyReviewerOnPush { Push { branch repo { name owner org { owner
    provider { apiUrl url providerId providerType private } } } commits { author { login
    } sha pullRequests { author { login } name number title body state merged reviewers
    { login } reviews { state by { login person { chatId { screenName preferences {
    name value } chatTeam { id } } } } } } } }}
  - subscription ApplicationToPushLifecycle { Application { _id commits { pushes { id
    _id builds { buildId buildUrl name provider status commit { sha } timestamp workflow
    { id name provider config builds { jobId jobName finishedAt startedAt status id
    buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp } timestamp }}
  - subscription BuildToPushLifecycle { Build { _id buildId buildUrl name provider status
    push { id _id builds { buildId buildUrl name provider status commit { sha } timestamp
    workflow { id name provider config builds { jobId jobName finishedAt startedAt status
    id buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp }}
  - subscription IssueToPushLifecycle { Issue { _id resolvingCommits { pushes { id _id
    builds { buildId buildUrl name provider status commit { sha } timestamp workflow
    { id name provider config builds { jobId jobName finishedAt startedAt status id
    buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp } timestamp }}
  - subscription K8PodToPushLifecycle { K8Pod { _id name state images { commits { pushes
    { id _id builds { buildId buildUrl name provider status commit { sha } timestamp
    workflow { id name provider config builds { jobId jobName finishedAt startedAt status
    id buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp } timestamp } timestamp }}
  - subscription PolicyComplianceToPushLifecycle { PolicyCompliance { push { id _id
    builds { buildId buildUrl name provider status commit { sha } timestamp workflow
    { id name provider config builds { jobId jobName finishedAt startedAt status id
    buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } }}
  - subscription PushToPushLifecycle { Push { id _id builds { buildId buildUrl name
    provider status commit { sha } timestamp workflow { id name provider config builds
    { jobId jobName finishedAt startedAt status id buildUrl } } } before { sha analysis
    { type name sha data displayName displayValue displayType } } after { sha message
    email { address } author { login avatar person { chatId { screenName } } } committer
    { login name person { chatId { screenName } } } statuses { context description targetUrl
    state timestamp } tags { name release { name timestamp } builds { buildId buildUrl
    name provider status timestamp } timestamp } images { _id image imageName pods {
    _id name phase environment namespace timestamp baseName resourceVersion containers
    { _id name imageName timestamp environment state ready restartCount statusJSON resourceVersion
    } } timestamp } analysis { type name sha data displayName displayValue displayType
    } } repo { owner name channels { name team { id } } labels { name } org { provider
    { url apiUrl gitUrl providerId providerType private } team { id chatTeams { id preferences
    { name value } } } } defaultBranch } commits { sha message email { address } resolves
    { number name title state openedBy { login } } apps { state host domain data } tags
    { name release { name } containers { pods { host state name } image } } author {
    login avatar person { chatId { screenName } } } committer { login name person {
    chatId { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } }}
  - subscription ReleaseToPushLifecycle { Release { _id name tag { name commit { pushes
    { id _id builds { buildId buildUrl name provider status commit { sha } timestamp
    workflow { id name provider config builds { jobId jobName finishedAt startedAt status
    id buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp } } timestamp }}
  - subscription SdmGoalDisplayToPushLifecycle { SdmGoalDisplay { sha branch repo {
    name owner providerId } push { id _id builds { buildId buildUrl name provider status
    commit { sha } timestamp workflow { id name provider config builds { jobId jobName
    finishedAt startedAt status id buildUrl } } } before { sha analysis { type name
    sha data displayName displayValue displayType } } after { sha message email { address
    } author { login avatar person { chatId { screenName } } } committer { login name
    person { chatId { screenName } } } statuses { context description targetUrl state
    timestamp } tags { name release { name timestamp } builds { buildId buildUrl name
    provider status timestamp } timestamp } images { _id image imageName pods { _id
    name phase environment namespace timestamp baseName resourceVersion containers {
    _id name imageName timestamp environment state ready restartCount statusJSON resourceVersion
    } } timestamp } analysis { type name sha data displayName displayValue displayType
    } } repo { owner name channels { name team { id } } labels { name } org { provider
    { url apiUrl gitUrl providerId providerType private } team { id chatTeams { id preferences
    { name value } } } } defaultBranch } commits { sha message email { address } resolves
    { number name title state openedBy { login } } apps { state host domain data } tags
    { name release { name } containers { pods { host state name } image } } author {
    login avatar person { chatId { screenName } } } committer { login name person {
    chatId { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } } }}
  - subscription SdmGoalToPushLifecycle { SdmGoal { sha branch repo { name owner providerId
    } push { id _id builds { buildId buildUrl name provider status commit { sha } timestamp
    workflow { id name provider config builds { jobId jobName finishedAt startedAt status
    id buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } }}
  - subscription StatusToPushLifecycle { Status { _id context description targetUrl
    state commit { pushes { id _id builds { buildId buildUrl name provider status commit
    { sha } timestamp workflow { id name provider config builds { jobId jobName finishedAt
    startedAt status id buildUrl } } } before { sha analysis { type name sha data displayName
    displayValue displayType } } after { sha message email { address } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } statuses { context description targetUrl state timestamp } tags
    { name release { name timestamp } builds { buildId buildUrl name provider status
    timestamp } timestamp } images { _id image imageName pods { _id name phase environment
    namespace timestamp baseName resourceVersion containers { _id name imageName timestamp
    environment state ready restartCount statusJSON resourceVersion } } timestamp }
    analysis { type name sha data displayName displayValue displayType } } repo { owner
    name channels { name team { id } } labels { name } org { provider { url apiUrl gitUrl
    providerId providerType private } team { id chatTeams { id preferences { name value
    } } } } defaultBranch } commits { sha message email { address } resolves { number
    name title state openedBy { login } } apps { state host domain data } tags { name
    release { name } containers { pods { host state name } image } } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } } timestamp } }}
  - subscription TagToPushLifecycle { Tag { _id name commit { pushes { id _id builds
    { buildId buildUrl name provider status commit { sha } timestamp workflow { id name
    provider config builds { jobId jobName finishedAt startedAt status id buildUrl }
    } } before { sha analysis { type name sha data displayName displayValue displayType
    } } after { sha message email { address } author { login avatar person { chatId
    { screenName } } } committer { login name person { chatId { screenName } } } statuses
    { context description targetUrl state timestamp } tags { name release { name timestamp
    } builds { buildId buildUrl name provider status timestamp } timestamp } images
    { _id image imageName pods { _id name phase environment namespace timestamp baseName
    resourceVersion containers { _id name imageName timestamp environment state ready
    restartCount statusJSON resourceVersion } } timestamp } analysis { type name sha
    data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp } timestamp }}
  - subscription ApplicationToPushCardLifecycle { Application { _id commits { pushes
    { id _id builds { buildId buildUrl name provider status commit { sha } timestamp
    workflow { id name provider config builds { jobId jobName finishedAt startedAt status
    id buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp } timestamp }}
  - subscription BuildToPushCardLifecycle { Build { _id buildId buildUrl name provider
    status push { id _id builds { buildId buildUrl name provider status commit { sha
    } timestamp workflow { id name provider config builds { jobId jobName finishedAt
    startedAt status id buildUrl } } } before { sha analysis { type name sha data displayName
    displayValue displayType } } after { sha message email { address } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } statuses { context description targetUrl state timestamp } tags
    { name release { name timestamp } builds { buildId buildUrl name provider status
    timestamp } timestamp } images { _id image imageName pods { _id name phase environment
    namespace timestamp baseName resourceVersion containers { _id name imageName timestamp
    environment state ready restartCount statusJSON resourceVersion } } timestamp }
    analysis { type name sha data displayName displayValue displayType } } repo { owner
    name channels { name team { id } } labels { name } org { provider { url apiUrl gitUrl
    providerId providerType private } team { id chatTeams { id preferences { name value
    } } } } defaultBranch } commits { sha message email { address } resolves { number
    name title state openedBy { login } } apps { state host domain data } tags { name
    release { name } containers { pods { host state name } image } } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } } timestamp }}
  - subscription IssueToPushCardLifecycle { Issue { _id resolvingCommits { pushes {
    id _id builds { buildId buildUrl name provider status commit { sha } timestamp workflow
    { id name provider config builds { jobId jobName finishedAt startedAt status id
    buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp } timestamp }}
  - subscription K8PodToPushCardLifecycle { K8Pod { _id name state images { commits
    { pushes { id _id builds { buildId buildUrl name provider status commit { sha }
    timestamp workflow { id name provider config builds { jobId jobName finishedAt startedAt
    status id buildUrl } } } before { sha analysis { type name sha data displayName
    displayValue displayType } } after { sha message email { address } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } statuses { context description targetUrl state timestamp } tags
    { name release { name timestamp } builds { buildId buildUrl name provider status
    timestamp } timestamp } images { _id image imageName pods { _id name phase environment
    namespace timestamp baseName resourceVersion containers { _id name imageName timestamp
    environment state ready restartCount statusJSON resourceVersion } } timestamp }
    analysis { type name sha data displayName displayValue displayType } } repo { owner
    name channels { name team { id } } labels { name } org { provider { url apiUrl gitUrl
    providerId providerType private } team { id chatTeams { id preferences { name value
    } } } } defaultBranch } commits { sha message email { address } resolves { number
    name title state openedBy { login } } apps { state host domain data } tags { name
    release { name } containers { pods { host state name } image } } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } } timestamp } timestamp
    } timestamp }}
  - subscription PushToPushCardLifecycle { Push { id _id builds { buildId buildUrl name
    provider status commit { sha } timestamp workflow { id name provider config builds
    { jobId jobName finishedAt startedAt status id buildUrl } } } before { sha analysis
    { type name sha data displayName displayValue displayType } } after { sha message
    email { address } author { login avatar person { chatId { screenName } } } committer
    { login name person { chatId { screenName } } } statuses { context description targetUrl
    state timestamp } tags { name release { name timestamp } builds { buildId buildUrl
    name provider status timestamp } timestamp } images { _id image imageName pods {
    _id name phase environment namespace timestamp baseName resourceVersion containers
    { _id name imageName timestamp environment state ready restartCount statusJSON resourceVersion
    } } timestamp } analysis { type name sha data displayName displayValue displayType
    } } repo { owner name channels { name team { id } } labels { name } org { provider
    { url apiUrl gitUrl providerId providerType private } team { id chatTeams { id preferences
    { name value } } } } defaultBranch } commits { sha message email { address } resolves
    { number name title state openedBy { login } } apps { state host domain data } tags
    { name release { name } containers { pods { host state name } image } } author {
    login avatar person { chatId { screenName } } } committer { login name person {
    chatId { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } }}
  - subscription ReleaseToPushCardLifecycle { Release { _id name tag { name commit {
    pushes { id _id builds { buildId buildUrl name provider status commit { sha } timestamp
    workflow { id name provider config builds { jobId jobName finishedAt startedAt status
    id buildUrl } } } before { sha analysis { type name sha data displayName displayValue
    displayType } } after { sha message email { address } author { login avatar person
    { chatId { screenName } } } committer { login name person { chatId { screenName
    } } } statuses { context description targetUrl state timestamp } tags { name release
    { name timestamp } builds { buildId buildUrl name provider status timestamp } timestamp
    } images { _id image imageName pods { _id name phase environment namespace timestamp
    baseName resourceVersion containers { _id name imageName timestamp environment state
    ready restartCount statusJSON resourceVersion } } timestamp } analysis { type name
    sha data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp } } timestamp }}
  - subscription SdmGoalToPushCardLifecycle { SdmGoal { sha branch repo { name owner
    providerId } push { id _id builds { buildId buildUrl name provider status commit
    { sha } timestamp workflow { id name provider config builds { jobId jobName finishedAt
    startedAt status id buildUrl } } } before { sha analysis { type name sha data displayName
    displayValue displayType } } after { sha message email { address } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } statuses { context description targetUrl state timestamp } tags
    { name release { name timestamp } builds { buildId buildUrl name provider status
    timestamp } timestamp } images { _id image imageName pods { _id name phase environment
    namespace timestamp baseName resourceVersion containers { _id name imageName timestamp
    environment state ready restartCount statusJSON resourceVersion } } timestamp }
    analysis { type name sha data displayName displayValue displayType } } repo { owner
    name channels { name team { id } } labels { name } org { provider { url apiUrl gitUrl
    providerId providerType private } team { id chatTeams { id preferences { name value
    } } } } defaultBranch } commits { sha message email { address } resolves { number
    name title state openedBy { login } } apps { state host domain data } tags { name
    release { name } containers { pods { host state name } image } } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } } }}
  - subscription StatusToPushCardLifecycle { Status { _id context description targetUrl
    state commit { pushes { id _id builds { buildId buildUrl name provider status commit
    { sha } timestamp workflow { id name provider config builds { jobId jobName finishedAt
    startedAt status id buildUrl } } } before { sha analysis { type name sha data displayName
    displayValue displayType } } after { sha message email { address } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } statuses { context description targetUrl state timestamp } tags
    { name release { name timestamp } builds { buildId buildUrl name provider status
    timestamp } timestamp } images { _id image imageName pods { _id name phase environment
    namespace timestamp baseName resourceVersion containers { _id name imageName timestamp
    environment state ready restartCount statusJSON resourceVersion } } timestamp }
    analysis { type name sha data displayName displayValue displayType } } repo { owner
    name channels { name team { id } } labels { name } org { provider { url apiUrl gitUrl
    providerId providerType private } team { id chatTeams { id preferences { name value
    } } } } defaultBranch } commits { sha message email { address } resolves { number
    name title state openedBy { login } } apps { state host domain data } tags { name
    release { name } containers { pods { host state name } image } } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } } timestamp } }}
  - subscription TagToPushCardLifecycle { Tag { _id name commit { pushes { id _id builds
    { buildId buildUrl name provider status commit { sha } timestamp workflow { id name
    provider config builds { jobId jobName finishedAt startedAt status id buildUrl }
    } } before { sha analysis { type name sha data displayName displayValue displayType
    } } after { sha message email { address } author { login avatar person { chatId
    { screenName } } } committer { login name person { chatId { screenName } } } statuses
    { context description targetUrl state timestamp } tags { name release { name timestamp
    } builds { buildId buildUrl name provider status timestamp } timestamp } images
    { _id image imageName pods { _id name phase environment namespace timestamp baseName
    resourceVersion containers { _id name imageName timestamp environment state ready
    restartCount statusJSON resourceVersion } } timestamp } analysis { type name sha
    data displayName displayValue displayType } } repo { owner name channels { name
    team { id } } labels { name } org { provider { url apiUrl gitUrl providerId providerType
    private } team { id chatTeams { id preferences { name value } } } } defaultBranch
    } commits { sha message email { address } resolves { number name title state openedBy
    { login } } apps { state host domain data } tags { name release { name } containers
    { pods { host state name } image } } author { login avatar person { chatId { screenName
    } } } committer { login name person { chatId { screenName } } } timestamp } timestamp
    branch goals { id goalSet registration goalSetId environment name uniqueName sha
    branch state phase fulfillment { method name registration } description url externalUrl
    externalUrls { label url } externalKey retryFeasible ts preConditions { environment
    name } provenance { registration version name correlationId ts } repo { owner name
    } approval { channelId correlationId name registration ts userId version } approvalRequired
    preApproval { channelId correlationId name registration ts userId version } descriptions
    { canceled completed failed inProcess planned requested stopped skipped waitingForApproval
    waitingForPreApproval } parameters preApprovalRequired data } goalSets { goalSet
    goalSetId goals { uniqueName } ts provenance { name registration version } tags
    { name value } } goalsDisplayState { state format } compliance { id owner state
    targets { type name sha data displayName displayValue displayType } differences
    { type name sha data displayName displayValue displayType } aspects { type displayType
    manageable } } } timestamp } timestamp }}
  - subscription RebaseOnPush { Push { after { sha author { login } } commits { sha
    message } repo { owner name } branch }}
  - subscription PushToSimplePushLifecycle { Push { id _id builds { buildId buildUrl
    name provider status commit { sha } timestamp workflow { id name provider config
    builds { jobId jobName finishedAt startedAt status id buildUrl } } } before { sha
    analysis { type name sha data displayName displayValue displayType } } after { sha
    message email { address } author { login avatar person { chatId { screenName } }
    } committer { login name person { chatId { screenName } } } statuses { context description
    targetUrl state timestamp } tags { name release { name timestamp } builds { buildId
    buildUrl name provider status timestamp } timestamp } images { _id image imageName
    pods { _id name phase environment namespace timestamp baseName resourceVersion containers
    { _id name imageName timestamp environment state ready restartCount statusJSON resourceVersion
    } } timestamp } analysis { type name sha data displayName displayValue displayType
    } } repo { owner name channels { name team { id } } labels { name } org { provider
    { url apiUrl gitUrl providerId providerType private } team { id chatTeams { id preferences
    { name value } } } } defaultBranch } commits { sha message email { address } resolves
    { number name title state openedBy { login } } apps { state host domain data } tags
    { name release { name } containers { pods { host state name } image } } author {
    login avatar person { chatId { screenName } } } committer { login name person {
    chatId { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } }}
  - subscription SdmGoalToSimplePushLifecycle { SdmGoal { sha branch repo { name owner
    providerId } push { id _id builds { buildId buildUrl name provider status commit
    { sha } timestamp workflow { id name provider config builds { jobId jobName finishedAt
    startedAt status id buildUrl } } } before { sha analysis { type name sha data displayName
    displayValue displayType } } after { sha message email { address } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } statuses { context description targetUrl state timestamp } tags
    { name release { name timestamp } builds { buildId buildUrl name provider status
    timestamp } timestamp } images { _id image imageName pods { _id name phase environment
    namespace timestamp baseName resourceVersion containers { _id name imageName timestamp
    environment state ready restartCount statusJSON resourceVersion } } timestamp }
    analysis { type name sha data displayName displayValue displayType } } repo { owner
    name channels { name team { id } } labels { name } org { provider { url apiUrl gitUrl
    providerId providerType private } team { id chatTeams { id preferences { name value
    } } } } defaultBranch } commits { sha message email { address } resolves { number
    name title state openedBy { login } } apps { state host domain data } tags { name
    release { name } containers { pods { host state name } image } } author { login
    avatar person { chatId { screenName } } } committer { login name person { chatId
    { screenName } } } timestamp } timestamp branch goals { id goalSet registration
    goalSetId environment name uniqueName sha branch state phase fulfillment { method
    name registration } description url externalUrl externalUrls { label url } externalKey
    retryFeasible ts preConditions { environment name } provenance { registration version
    name correlationId ts } repo { owner name } approval { channelId correlationId name
    registration ts userId version } approvalRequired preApproval { channelId correlationId
    name registration ts userId version } descriptions { canceled completed failed inProcess
    planned requested stopped skipped waitingForApproval waitingForPreApproval } parameters
    preApprovalRequired data } goalSets { goalSet goalSetId goals { uniqueName } ts
    provenance { name registration version } tags { name value } } goalsDisplayState
    { state format } compliance { id owner state targets { type name sha data displayName
    displayValue displayType } differences { type name sha data displayName displayValue
    displayType } aspects { type displayType manageable } } } }}
  - subscription NotifyAuthorOnReview { Review { _id body state htmlUrl by { login }
    pullRequest { head { sha } author { login person { chatId { screenName preferences
    { name value } chatTeam { id } } } } number title state merged labels { name } repo
    { name owner org { provider { url providerId providerType private } } channels {
    name channelId } } } }}
  - subscription PullRequestToReviewLifecycle { PullRequest { _id reviews { _id body
    state htmlUrl by { login } pullRequest { head { sha } number title state merged
    reviewers { login } labels { name } repo { name owner org { provider { url providerId
    providerType private } team { id chatTeams { id preferences { name value } } } }
    channels { name team { id } } } } } }}
  - subscription ReviewToReviewLifecycle { Review { _id body state htmlUrl by { login
    } pullRequest { head { sha } number title state merged reviewers { login } labels
    { name } repo { name owner org { provider { url apiUrl providerId providerType private
    } team { id chatTeams { id preferences { name value } } } } channels { name team
    { id } } } } }}
  - subscription UpdateOnJobTask { AtmJobTask { job { id data name description owner
    state createdAt updatedAt completedAt jobCount completedCount } }}
